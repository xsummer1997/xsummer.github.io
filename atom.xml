<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xsummer</title>
  <icon>https://www.gravatar.com/avatar/afa88b109b52b108304a6fbf419ae2ff</icon>
  
  <link href="https://xsummer1997.github.io/atom.xml" rel="self"/>
  
  <link href="https://xsummer1997.github.io/"/>
  <updated>2020-11-24T12:37:43.383Z</updated>
  <id>https://xsummer1997.github.io/</id>
  
  <author>
    <name>Xsummer</name>
    <email>xsummer1997@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xsummer1997.github.io/2020/11/24/hello-world/"/>
    <id>https://xsummer1997.github.io/2020/11/24/hello-world/</id>
    <published>2020-11-24T12:37:43.383Z</published>
    <updated>2020-11-24T12:37:43.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Shell 中字符串的分割和括号的使用</title>
    <link href="https://xsummer1997.github.io/2020/09/16/Shell-Char-Brackets/"/>
    <id>https://xsummer1997.github.io/2020/09/16/Shell-Char-Brackets/</id>
    <published>2020-09-16T11:18:21.000Z</published>
    <updated>2020-09-16T12:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><p>在Shell编程过程中经常要用到字符串的截取和一些括号的使用，在这进行详细的说明</p><h1 id="字符串截取和替换"><a href="#字符串截取和替换" class="headerlink" title="字符串截取和替换"></a>字符串截取和替换</h1><h2 id="string-var"><a href="#string-var" class="headerlink" title="{string##*var}"></a>{string##*var}</h2><blockquote><p>从左到右 截取 最后一个等于var字符串 右边的字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string##*test&#125;</span></span><br><span class="line">$ .word</span><br></pre></td></tr></table></figure><h2 id="string-var-1"><a href="#string-var-1" class="headerlink" title="{string#*var}"></a>{string#*var}</h2><blockquote><p>从左到右 截取 第一个等于var字符串 右边的字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string#*test&#125;</span></span><br><span class="line">$ fortest.word</span><br></pre></td></tr></table></figure><h2 id="string-var-2"><a href="#string-var-2" class="headerlink" title="{string%%*var}"></a>{string%%*var}</h2><blockquote><p>从右到左 截取 最后一个等于var字符串 左边的字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string%%test*&#125;</span></span><br><span class="line">$ this</span><br></pre></td></tr></table></figure><h2 id="string-var-3"><a href="#string-var-3" class="headerlink" title="{string%*var}"></a>{string%*var}</h2><blockquote><p>从右到左 截取 第一个等于var字符串 左边的字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string%test*&#125;</span></span><br><span class="line">$ thistestfor</span><br></pre></td></tr></table></figure><h2 id="取子串及替换"><a href="#取子串及替换" class="headerlink" title="取子串及替换"></a>取子串及替换</h2><blockquote><p>${string:n1:n2} 其中n1为左边起始位置，n2为右边截止位置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string:0:4&#125;</span></span><br><span class="line">$ this</span><br></pre></td></tr></table></figure><blockquote><p>${string/var/replace} 将第一个var替换成replace</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string/test/\&#x27;replace\&#x27;&#125;</span></span><br><span class="line">$ this<span class="string">&#x27;replace&#x27;</span>fortest.word</span><br></pre></td></tr></table></figure><blockquote><p>${string/var/replace} 将全部var替换成replace</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ string=<span class="string">&#x27;thistestfortest.word&#x27;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;string//test/\&#x27;replace\&#x27;&#125;</span></span><br><span class="line">$ this<span class="string">&#x27;replace&#x27;</span><span class="keyword">for</span><span class="string">&#x27;replace&#x27;</span>.word</span><br></pre></td></tr></table></figure><h1 id="各种括号的用法"><a href="#各种括号的用法" class="headerlink" title="各种括号的用法"></a>各种括号的用法</h1><h2 id="单小括号"><a href="#单小括号" class="headerlink" title="单小括号()"></a>单小括号()</h2><ul><li>命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ (<span class="built_in">echo</span> <span class="string">&quot;test&quot;</span>; <span class="built_in">pwd</span>; <span class="built_in">echo</span> $?)</span><br><span class="line">$ <span class="built_in">test</span></span><br><span class="line">$ /Users/xsummer</span><br><span class="line">$ 0</span><br></pre></td></tr></table></figure><ul><li>命令替换。等同于`CMD`，将$(CMD)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。但`CMD`都能支持。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ TEST=$(<span class="built_in">echo</span> <span class="string">&quot;test&quot;</span>)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$TEST</span></span><br><span class="line">$ <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ul><li>初始化数组</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ array=(a b c d)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$array</span>[*]</span><br><span class="line">$ a b c d</span><br></pre></td></tr></table></figure><h2 id="双小括号"><a href="#双小括号" class="headerlink" title="双小括号(())"></a>双小括号(())</h2><ul><li>整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者是”假”，而一个非零值的表达式所返回的退出状态码将为0，或者是”true”。若是逻辑判断，表达式exp为真则为0,假则为1。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ((5 - 4)); <span class="built_in">echo</span> $?</span><br><span class="line">$ 0</span><br><span class="line">$ ((5 - 5)); <span class="built_in">echo</span> $?</span><br><span class="line">$ 1</span><br><span class="line">$ ((5 &gt; 4)); <span class="built_in">echo</span> $?</span><br><span class="line">$ 0</span><br><span class="line">$ ((5 = 4)); <span class="built_in">echo</span> $?</span><br><span class="line">$ 1</span><br></pre></td></tr></table></figure><ul><li>只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> $((<span class="number">5</span>&gt;<span class="number">4</span>?<span class="number">0</span>:<span class="number">1</span>))</span><br><span class="line">$ 0</span><br><span class="line">$ <span class="built_in">echo</span> $((<span class="number">16#1f</span>))</span><br><span class="line">$ 31</span><br></pre></td></tr></table></figure><ul><li>重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ a=1</span><br><span class="line">$ ((a++))</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">$ 2</span><br></pre></td></tr></table></figure><ul><li>常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i&lt;5;i++)), 如果不使用双括号, 则为for i in seq 0 4或者for i in {0..4}。再如可以直接使用if (($i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> ((i=0;i&lt;=2;i++)); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;i = <span class="variable">$i</span>&quot;</span>; <span class="keyword">done</span></span><br><span class="line">$ i = 0</span><br><span class="line">$ i = 1</span><br><span class="line">$ i = 2</span><br></pre></td></tr></table></figure><h2 id="单中括号"><a href="#单中括号" class="headerlink" title="单中括号[]"></a>单中括号[]</h2><ul><li>bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ [ 5 -gt 4 ]; <span class="built_in">echo</span> $?</span><br><span class="line">$ 0</span><br><span class="line">$ <span class="built_in">test</span> 5 -gt 4; <span class="built_in">echo</span> $?</span><br><span class="line">$ 0</span><br></pre></td></tr></table></figure><ul><li>test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较”ab”和”bc”：[ ab &lt; bc ]，结果为真，也就是返回状态为0。[ ]中的逻辑与和逻辑或使用-a 和-o 表示。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ [ 5 -gt 4 -a 6 -gt 5 ]; <span class="built_in">echo</span> $?</span><br><span class="line">$ 0</span><br></pre></td></tr></table></figure><ul><li>字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span> \</span><br><span class="line">$ &gt; 1 2 \</span><br><span class="line">$ &gt; <span class="built_in">test</span> again | grep -o <span class="string">&quot;[0-9]&quot;</span></span><br><span class="line">$ 1</span><br><span class="line">$ 2</span><br></pre></td></tr></table></figure><ul><li>在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ array=(a b c d)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$array</span>[1]</span><br><span class="line">$ a</span><br></pre></td></tr></table></figure><h2 id="双中括号"><a href="#双中括号" class="headerlink" title="双中括号[[]]"></a>双中括号[[]]</h2><ul><li><p>[[是 bash 程序语言的关键字。并不是一个命令，[[ ]] 结构比[ ]结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。</p></li><li><p>支持字符串的模式匹配，使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[[ ]] 中匹配字符串或通配符，不需要引号。</p></li><li><p>使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，&amp;&amp;、||、&lt;和&gt; 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。比如可以直接使用if [[ $a != 1 &amp;&amp; $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] &amp;&amp; [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。</p></li><li><p>bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://xsummer1997.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://xsummer1997.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Shell" scheme="https://xsummer1997.github.io/tags/Shell/"/>
    
    <category term="Linux" scheme="https://xsummer1997.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下 NFS 服务配置</title>
    <link href="https://xsummer1997.github.io/2020/07/12/NFS_CFG/"/>
    <id>https://xsummer1997.github.io/2020/07/12/NFS_CFG/</id>
    <published>2020-07-12T12:04:50.000Z</published>
    <updated>2020-09-16T12:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><p>NFS（Network File System），即网络文件系统。功能是通过网络让不同的机器、不同的操作系统能够分享个人数据，让应用程序通过网络可以访问位于服务器磁盘中的数据。</p><h1 id="NFS服务端、RPC协议、NFS客户端之间的关系"><a href="#NFS服务端、RPC协议、NFS客户端之间的关系" class="headerlink" title="NFS服务端、RPC协议、NFS客户端之间的关系"></a>NFS服务端、RPC协议、NFS客户端之间的关系</h1><p><img src="https://i.loli.net/2020/07/11/9cHBUs4d2EmvRKN.png" alt="NFS.png"></p><h1 id="服务端NFS配置"><a href="#服务端NFS配置" class="headerlink" title="服务端NFS配置"></a>服务端NFS配置</h1><h2 id="安装NFS和RPC"><a href="#安装NFS和RPC" class="headerlink" title="安装NFS和RPC"></a>安装NFS和RPC</h2><ul><li>CentOS</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nfs-utils rpcbind</span><br></pre></td></tr></table></figure><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><h2 id="新建NFS共享文件并修改权限"><a href="#新建NFS共享文件并修改权限" class="headerlink" title="新建NFS共享文件并修改权限"></a>新建NFS共享文件并修改权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p share_dir</span><br><span class="line">$ chmod 777 -R share_dir</span><br><span class="line">$ chmod nobody:nobody share_dir</span><br></pre></td></tr></table></figure><h2 id="NFS-配置-etc-exports文件"><a href="#NFS-配置-etc-exports文件" class="headerlink" title="NFS 配置/etc/exports文件"></a>NFS 配置/etc/exports文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;&gt; /etc/exports &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">share_dir client_ip(rw,sync, insecure, no_root_squash)</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>其中share_dir 为服务器端共享目录（绝对路径），client_ip为客户端IP地址</li><li>后面括号里的rw代表读写权限</li><li>sync代表数据同步写入到NFS服务端的硬盘中,所有数据在请求时写入共享</li><li>insecure 控制不让端口超过1024</li><li>no_root_squash root用户具有根目录的完全管理访问权限</li></ul><h2 id="启动NFS服务"><a href="#启动NFS服务" class="headerlink" title="启动NFS服务"></a>启动NFS服务</h2><h3 id="设置RPC服务和NFS服务开机启动"><a href="#设置RPC服务和NFS服务开机启动" class="headerlink" title="设置RPC服务和NFS服务开机启动"></a>设置RPC服务和NFS服务开机启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> rpcbind.service</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nfs-server.service</span><br></pre></td></tr></table></figure><blockquote><p>注：必须先开启rpc服务，下同</p></blockquote><h3 id="开启RPC和NFS服务"><a href="#开启RPC和NFS服务" class="headerlink" title="开启RPC和NFS服务"></a>开启RPC和NFS服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind.service</span><br><span class="line">systemctl start nfs-server.service</span><br></pre></td></tr></table></figure><h2 id="重新设置权限生效"><a href="#重新设置权限生效" class="headerlink" title="重新设置权限生效"></a>重新设置权限生效</h2><ul><li>重启NFS服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart nfs-server.server</span><br></pre></td></tr></table></figure><ul><li>利用exportfs重新扫描/etc/exports文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ exportfs -au    <span class="comment">#卸载所有共享目录</span></span><br><span class="line">$ exportfs -rv    <span class="comment">#重新共享所有有目录并输出详细信息</span></span><br></pre></td></tr></table></figure><h2 id="查看配置是否生效"><a href="#查看配置是否生效" class="headerlink" title="查看配置是否生效"></a>查看配置是否生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ exportfs</span><br><span class="line">$ share_dir client_ip</span><br></pre></td></tr></table></figure><h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><p>##安装与启动</p><ol><li>安装部分与服务端相同，见上面步骤</li><li>客户端不需要启动nfs服务，只需要启动rpc服务</li></ol><h2 id="检查NFS服务端是否有目录共享"><a href="#检查NFS服务端是否有目录共享" class="headerlink" title="检查NFS服务端是否有目录共享"></a>检查NFS服务端是否有目录共享</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ showmount -e nfs server_ip</span><br></pre></td></tr></table></figure><h2 id="挂载NFS服务端目录"><a href="#挂载NFS服务端目录" class="headerlink" title="挂载NFS服务端目录"></a>挂载NFS服务端目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mount -t nfs server_ip:/data/nfs mnt_point</span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure><blockquote><p>挂载NFS服务端的/data/nfs目录到 客户端的挂载点mnt_point,并查看是否挂载成功</p></blockquote><h1 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)</span><br></pre></td></tr></table></figure><ul><li>解决办法：</li></ul><blockquote><ol><li>关闭服务端的防火墙</li><li>添加相应端口的防火墙规则</li></ol></blockquote><blockquote><blockquote><p>查看客户端RPC服务使用端口 </p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rpcinfo -p client_ip</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://xsummer1997.github.io/categories/Linux/"/>
    
    <category term="NFS" scheme="https://xsummer1997.github.io/categories/Linux/NFS/"/>
    
    
    <category term="Linux" scheme="https://xsummer1997.github.io/tags/Linux/"/>
    
    <category term="NFS" scheme="https://xsummer1997.github.io/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>利用kickstart进行无人值守安装CentOS</title>
    <link href="https://xsummer1997.github.io/2020/06/26/Use-kickstart-to-install-CentOS-unattended/"/>
    <id>https://xsummer1997.github.io/2020/06/26/Use-kickstart-to-install-CentOS-unattended/</id>
    <published>2020-06-26T07:50:15.000Z</published>
    <updated>2020-07-08T13:36:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="利用kickstart进行无人值守安装CentOS"><a href="#利用kickstart进行无人值守安装CentOS" class="headerlink" title="利用kickstart进行无人值守安装CentOS"></a>利用kickstart进行无人值守安装CentOS</h1><h2 id="下载CentOS"><a href="#下载CentOS" class="headerlink" title="下载CentOS"></a>下载CentOS</h2><blockquote><p><a href="http://mirrors.163.com/centos/">CentOS</a> (使用的是网易的镜像)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CentOS" scheme="https://xsummer1997.github.io/categories/CentOS/"/>
    
    <category term="kickstart" scheme="https://xsummer1997.github.io/categories/CentOS/kickstart/"/>
    
    
    <category term="CentOS" scheme="https://xsummer1997.github.io/tags/CentOS/"/>
    
    <category term="kickstart" scheme="https://xsummer1997.github.io/tags/kickstart/"/>
    
  </entry>
  
  <entry>
    <title>C 库函数</title>
    <link href="https://xsummer1997.github.io/2019/12/14/C-lib-Func/"/>
    <id>https://xsummer1997.github.io/2019/12/14/C-lib-Func/</id>
    <published>2019-12-14T14:39:35.000Z</published>
    <updated>2020-10-24T10:27:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="C-库函数"><a href="#C-库函数" class="headerlink" title="C 库函数"></a>C 库函数</h1><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><blockquote><p>使用函数时，应该在源文件中使用以 下命令行：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;math.h&quot;</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><div style="width=300px">函数名</div></th><th align="center">函数原型</th><th align="center">功能</th><th align="center">返回值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@@@@</td><td align="center">@@@@@@@@@@@@@@@@@@@@</td><td align="center">@@@@@@@@@@@@@@@</td><td align="center">@@@</td><td align="center">@@@@@@</td></tr><tr><td align="center">sin</td><td align="center">double sin(double x)</td><td align="center">计算 $sin(x)$ 的值</td><td align="center">计算结果</td><td align="center">x 的单位为弧度</td></tr><tr><td align="center">asin</td><td align="center">double asin(double x)</td><td align="center">计算 $sin^{-1}(x)$ 的值</td><td align="center">计算结果</td><td align="center">x 应在 -1 到 1 范围内</td></tr><tr><td align="center">sinh</td><td align="center">double sinh(double x)</td><td align="center">计算 x 的双曲正弦函数 $sinh(x)$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">cos</td><td align="center">double cos(double x)</td><td align="center">计算 $cos(x)$ 的值</td><td align="center">计算结果</td><td align="center">x 的单位为弧度</td></tr><tr><td align="center">acos</td><td align="center">double acos(double x)</td><td align="center">计算 $cos^{-1}(x)$ 的值</td><td align="center">计算结果</td><td align="center">x 应在 -1 到 1 范围内</td></tr><tr><td align="center">cosh</td><td align="center">double cosh(double x)</td><td align="center">计算 x 的双曲余弦函数 $cosh(x)$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">tan</td><td align="center">double tan(double x)</td><td align="center">计算 $tan(x)$ 的值</td><td align="center">计算结果</td><td align="center">x 的单位为弧度</td></tr><tr><td align="center">atan</td><td align="center">double atan(double x)</td><td align="center">计算 $tan^{-1}(x)$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">atan2</td><td align="center">double atan2(double x, double y)</td><td align="center">计算 $tan^{-1}(\frac xy)$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">tanh</td><td align="center">double tanh(double x)</td><td align="center">计算 x 的双曲正切函数 $tanh(x)$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">abs</td><td align="center">int abs(int x)</td><td align="center">求整数 x 的绝对值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">fabs</td><td align="center">int fabs(double x)</td><td align="center">求 x 的绝对值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">exp</td><td align="center">double exp(double x)</td><td align="center">求 $e^x$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">pow</td><td align="center">double pow(double x, double y)</td><td align="center">求 $x^y$ 的值</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">frexp</td><td align="center">double frexp(double val, int * eptr)</td><td align="center">把双精度数val分解为数字部分（尾数) x 和以 2 为底的指数 n ，即 $val = x * 2^n$ , n 存放在 eptr 指向的变量中</td><td align="center">返回数字部分x范围： $0.5 &lt;= x &lt;= 1$</td><td align="center">-</td></tr><tr><td align="center">modf</td><td align="center">double modf(double val, int * iptr)</td><td align="center">把双精度数 val 分解为整数部分和小数部分 ，把整数部分存放在 iptr 指向的变量中</td><td align="center">val 的小数部分</td><td align="center">-</td></tr><tr><td align="center">floor</td><td align="center">double floor(double x)</td><td align="center">求出不大于 x 的最大整数</td><td align="center">该整数的双精度实数</td><td align="center">-</td></tr><tr><td align="center">fmod</td><td align="center">double fmod(double x, double y)</td><td align="center">求整除 $\frac xy$ 的余数</td><td align="center">返回余数的双精度数</td><td align="center">-</td></tr><tr><td align="center">log</td><td align="center">double log(double x)</td><td align="center">求 $log_e x$ , 即 $ln x$</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">log10</td><td align="center">double log10(double x)</td><td align="center">求 $log_{10} x$ , 即 $lg x$</td><td align="center">计算结果</td><td align="center">-</td></tr><tr><td align="center">rand</td><td align="center">int rand(void)</td><td align="center">产生 -90 到 -32767 间的随机整数</td><td align="center">随机整数</td><td align="center">-</td></tr><tr><td align="center">sqrt</td><td align="center">double sqrt(double x)</td><td align="center">计算 $\sqrt[2]x$</td><td align="center">计算结果</td><td align="center">x应大于等于0</td></tr></tbody></table><h2 id="字符函数和字符串函数"><a href="#字符函数和字符串函数" class="headerlink" title="字符函数和字符串函数"></a>字符函数和字符串函数</h2><blockquote><p>使用字符串函数时，应该在源文件中使用以下命令行：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;string.h&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>使用字符函数时，应该在源文件中使用以下命令行：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;ctype.h&quot;</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数名</th><th align="center">函数原型</th><th align="center">功能</th><th align="center">返回值</th><th align="center">包含文件</th></tr></thead><tbody><tr><td align="center">@@@@</td><td align="center">@@@@@@@@@@@@@@@@@@@@@</td><td align="center">@@@@@@@@@@@@@@@</td><td align="center">@@@@@@@@@</td><td align="center">@@@@@</td></tr><tr><td align="center">isalnum</td><td align="center">int isalnum(int ch)</td><td align="center">检查ch是否是字母（alpha）或者数字（numeric）</td><td align="center">是字母或者数字返回 1；否则返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">isalpha</td><td align="center">int isalpha(int ch)</td><td align="center">检查ch是否是字母（alpha）</td><td align="center">是字母返回1；否则返回0</td><td align="center">ctype.h</td></tr><tr><td align="center">isdigit</td><td align="center">int isdigit(int ch)</td><td align="center">检查ch是否控制字符（其ASCLL码在 0 到 0x1F 之间）</td><td align="center">是，返回 1；不是返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">isgraph</td><td align="center">int isgraph(int ch)</td><td align="center">检查ch是否可打印字符（其ASCLL码在 0x21 到 0x7E 之间）不包含空格</td><td align="center">是，返回 1；不是返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">islower</td><td align="center">int islower(int ch)</td><td align="center">检查ch是否小写字母（a~z）</td><td align="center">是，返回1；不是返回0</td><td align="center">ctype.h</td></tr><tr><td align="center">isprint</td><td align="center">int isprint(int ch)</td><td align="center">检查ch是否可打印字符（其ASCLL码在 0x21 到 0x7E 之间）包含空格</td><td align="center">是，返回 1；不是返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">ispunct</td><td align="center">int ispunct(int ch)</td><td align="center">检查ch是否标点字符（不包括空格），即除字母、数字和空格以外的所有可打印字符</td><td align="center">是，返回 1；不是返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">isspace</td><td align="center">int isspace(int ch)</td><td align="center">检查ch是否空格、跳格键（制表符）或者换行符</td><td align="center">是，返回1；不是返回0</td><td align="center">ctype.h</td></tr><tr><td align="center">isupper</td><td align="center">int isupper(int ch)</td><td align="center">检查ch是否大写字母（A~Z）</td><td align="center">是，返回1；不是返回0</td><td align="center">ctype.h</td></tr><tr><td align="center">isxdigit</td><td align="center">int isxdigit(int ch)</td><td align="center">检查ch是否是一个十六进制数字字符（即 0<del>9，或者 A</del>F ，或 a~f ）</td><td align="center">是，返回 1；不是返回 0</td><td align="center">ctype.h</td></tr><tr><td align="center">strcat</td><td align="center">char * strcat(char * str1, char * str2)</td><td align="center">把字符串str2 接到字符串str1 后面，str1 最后面的 ‘\0’ 被取消</td><td align="center">str1</td><td align="center">string.h</td></tr><tr><td align="center">strchr</td><td align="center">char * strchr(char * str, int ch)</td><td align="center">找出字符串str指向的字符串中第一次出现字符ch的位置</td><td align="center">返回指向该位置的指针，如找不到，则返回空指针</td><td align="center">string.h</td></tr><tr><td align="center">strcmp</td><td align="center">int strcmp(char * str1, char * str2)</td><td align="center">比较 str1 和 str2 两个字符串</td><td align="center">str1 &lt; str2, 返回负数；str1 = str2, 返回0；str1 &gt; str2, 返回整数</td><td align="center">string.h</td></tr><tr><td align="center">strcpy</td><td align="center">char * strcpy(char * str1, char * str2)</td><td align="center">把str2指向的字符串复制到str1去</td><td align="center">返回str1</td><td align="center">string.h</td></tr><tr><td align="center">strlen</td><td align="center">unsigned int strlen(char * str)</td><td align="center">统计字符串str中字符的个数（不包括终止符 ‘\0’）</td><td align="center">返回字符个数</td><td align="center">string.h</td></tr><tr><td align="center">strstr</td><td align="center">char * strstr(char * str1, char * str2)</td><td align="center">找出字符串str2在字符串str1中第一次出现的位置（不包括 str2 的串结束符）</td><td align="center">返回该位置的指针，如找不到，则返回空指针</td><td align="center">string.h</td></tr><tr><td align="center">tolower</td><td align="center">int tolower(int ch)</td><td align="center">将 ch 字符转换成小写字母</td><td align="center">返回 ch 所代表的的字符的小写字母</td><td align="center">ctype.h</td></tr><tr><td align="center">toupper</td><td align="center">int toupper(int ch)</td><td align="center">将 ch 字符转换成大写字母</td><td align="center">返回 ch 所代表的的字符的大写字母</td><td align="center">ctype.h</td></tr></tbody></table><h2 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h2><blockquote><p>使用输入输出函数时，应该在源文件中使用以下命令行：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">函数名</th><th align="center">函数原型</th><th align="center">功能</th><th align="center">返回值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@@@@</td><td align="center">@@@@@@@@@@@@@@@@@@@@@@</td><td align="center">@@@@@@@@@@@@@@</td><td align="center">@@@@@@@@@</td><td align="center">@@@@@</td></tr><tr><td align="center">clearerr</td><td align="center">void clearerr(FILE *fp)</td><td align="center">使fp所致文件的错误，标志和文件结束标志置 0</td><td align="center">无</td><td align="center">-</td></tr><tr><td align="center">close</td><td align="center">int close(int fp)</td><td align="center">关闭文件</td><td align="center">关闭成功返回 0；不成功返回 -1</td><td align="center">非 ANSI 标准</td></tr><tr><td align="center">creat</td><td align="center">int creat(char * filename, int mode)</td><td align="center">以 mode 所指定的方式建立文件</td><td align="center">成功则返回整数；否则返回 0</td><td align="center">非 ANSI 标准</td></tr><tr><td align="center">eof</td><td align="center">int eof(int fd)</td><td align="center">检查文件是否结束</td><td align="center">遇文件结束，则返回 1；否则返回 0</td><td align="center">非 ANSI 标准</td></tr><tr><td align="center">fclose</td><td align="center">int fclose(FILE * fp)</td><td align="center">关闭 fp 所指的文件，释放文件缓冲区</td><td align="center">成功返回 0；不成功返回非 0</td><td align="center">-</td></tr><tr><td align="center">feof</td><td align="center">int feof(FILE * fp)</td><td align="center">检查文件是否结束</td><td align="center">遇文件结束符返回非 0；否则返回 0</td><td align="center">-</td></tr><tr><td align="center">fgetc</td><td align="center">int fgetc(FILE * fp)</td><td align="center">从 fp 所指定的文件中取得下一个字符</td><td align="center">返回所得到的字符，若读入出错，返回 EOF</td><td align="center">-</td></tr><tr><td align="center">fgets</td><td align="center">char *fgets(char * buf, int n, FILE * fp)</td><td align="center">从fp指向的文件读取一个长度为（n-1）的字符串，存入起始地址为 buf 的空间</td><td align="center">返回地址 buf，若遇到文件结束或出错，返回 NULL</td><td align="center">-</td></tr><tr><td align="center">fopen</td><td align="center">FILE *fopen(char * filename, char * mode)</td><td align="center">以 mode 指定的文件方式打开名为 filename 的文件</td><td align="center">成功返回一个文件指针（文件信息区的起始地址）；否则返回 0</td><td align="center">-</td></tr><tr><td align="center">fprintf</td><td align="center">int fprintf(FILE * fp, char * format, args, …)</td><td align="center">把 args 的值以 format 指定的格式输出到 fp 指定的文件中</td><td align="center">实际输出的字符数</td><td align="center">-</td></tr><tr><td align="center">fputc</td><td align="center">int fputc(char ch, FILE * fp)</td><td align="center">将字符 ch 输出到 fp 指向的文件中</td><td align="center">成功则返回该字符；否则返回非0</td><td align="center">-</td></tr><tr><td align="center">fputs</td><td align="center">char fputs(* str, FILE * fp)</td><td align="center">将 str 指向的字符串输出到 fp 所指定的文件</td><td align="center">成功返回0；若出错返回非 0</td><td align="center">-</td></tr><tr><td align="center">fread</td><td align="center">int fread(char * pt, unsigned size,unsigned n, FILE * fp)</td><td align="center">从  fp 所指定的文件中读取长度为 size 的 n 个数据项，存放到 pt 所指定的内存区</td><td align="center">返回所读的数据项个数，如遇文件结束或出错返回 0</td><td align="center">-</td></tr><tr><td align="center">fscanf</td><td align="center">int fscanf(FILE * fp, char format, args,…)</td><td align="center">从 fp 指定的文件中按 format 给定的格式将输入数据送到 args 所指向的内存单元（args 是指针）</td><td align="center">已输入的数据个数</td><td align="center">-</td></tr><tr><td align="center">fseek</td><td align="center">int fseek(FILE * fp, long offset, int base)</td><td align="center">将 fp 所指向的文件的位置指针移到 base 所给出的位置为基准、以 offset 为位移量的位置</td><td align="center">返回当前位置；否则返回 -1</td><td align="center">-</td></tr><tr><td align="center">ftell</td><td align="center">long ftell (FILE * fp)</td><td align="center">返回fp所指向的文件中的读写位置</td><td align="center">返回fp所指向的文件中的读写位置</td><td align="center">-</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C" scheme="https://xsummer1997.github.io/categories/C/"/>
    
    <category term="Function" scheme="https://xsummer1997.github.io/categories/C/Function/"/>
    
    
    <category term="C" scheme="https://xsummer1997.github.io/tags/C/"/>
    
    <category term="Function" scheme="https://xsummer1997.github.io/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>shell命令 cut 的用法</title>
    <link href="https://xsummer1997.github.io/2019/12/11/Shell-cut-Usage/"/>
    <id>https://xsummer1997.github.io/2019/12/11/Shell-cut-Usage/</id>
    <published>2019-12-11T10:26:14.000Z</published>
    <updated>2019-12-14T14:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="cut-的用法"><a href="#cut-的用法" class="headerlink" title="cut 的用法"></a>cut 的用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut ***OPTION...*** ***[FILE]...***</span><br></pre></td></tr></table></figure><h2 id="OPTION选项各参数解析及例子"><a href="#OPTION选项各参数解析及例子" class="headerlink" title="OPTION选项各参数解析及例子"></a>OPTION选项各参数解析及例子</h2><ul><li>-b  按字节（bytes）剪切</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -b[n1-n2] [FILE]</span><br></pre></td></tr></table></figure><blockquote><p>n1和n2可以只有一个，表示选择第n个字符，n1-n2 表示选择n1-n2间的字符</p></blockquote><p><img src="https://i.loli.net/2019/12/11/j17h4WVrLC5pYHv.png" alt="Figure1_cut-b"></p><ul><li>-n 不要分隔多字节字符，与 -b 一起使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -b[n1-n2] -n [FILE]</span><br></pre></td></tr></table></figure><blockquote><p>由Figure1可以看出，当选择的是汉字时就会出现乱码，这时就需要加上 -n 选项了</p></blockquote><p><img src="https://i.loli.net/2019/12/11/i1qNDdIWTEJyn8Y.png" alt="Figure2_cut-b-n"></p><ul><li>-c 按字符剪切</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -c[n1-n2] [FILE]</span><br></pre></td></tr></table></figure><blockquote><p>不管是单字节字符，还是多字节字符，都算一个</p></blockquote><p><img src="https://i.loli.net/2019/12/11/2QuzwC1osIaGXFp.png" alt="Figure_cut-c"></p><ul><li>-f 按字段分隔符来剪切</li><li>-d 设定字段分隔符，默认为[TAB]，与 -f 一起使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cut -f[n1-n2] [FILE]</span><br><span class="line">$ cut -d<span class="string">&quot;[分隔符]&quot;</span> -f[n1-n2] [FILE]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/11/7OQlA4vFNHxKpC9.png" alt="Figure3_cut-f"><br><img src="https://i.loli.net/2019/12/11/eJmPvuozr6Cfxsy.png" alt="Figure4_cut-d-f"></p><ul><li>-s 不选择不包含分隔符的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -f[n1-n2] -s [FILE]</span><br></pre></td></tr></table></figure><blockquote><p>对比Figure3可知，加上 -s 后，最后一行不包含分隔符[TAB]的行，不再被打印</p></blockquote><p><img src="https://i.loli.net/2019/12/11/vj8zxQKoTy74WXc.png" alt="Figure5_cut-f-s"></p><ul><li>–complement 补充所选字节，字符或字段的集合（反向选择，打印出未被选择的字节、字符或字段）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -f[n1-n2] --complement [FILE]</span><br></pre></td></tr></table></figure><blockquote><p>这里的 -f 选项亦可换成 -b -c，根据需要自选</p></blockquote><p><img src="https://i.loli.net/2019/12/11/gdoxHIYN2vjnuXz.png" alt="Figure6_cut-f-commplement"></p><ul><li>–output-delimiter 指定输出分隔符，默认为输入分隔符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cut -f[n1-n2] --output-delimiter <span class="string">&quot;[分隔符]&quot;</span> [FILE]</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/11/EjZ7glK1RV8HGuF.png" alt="Figure7_cut-f-output-delimiter"></p><blockquote><p>注：n1-n2（n1和n2之间的所有），n1/n2（n1或n2），n1-（n1及n1以后所有），-n2（n2及n2之前所有）。如果选择了两个范围：-f1-3,2-4 ，等价于-f1-4</p></blockquote><p><img src="https://i.loli.net/2019/12/11/8TnDRzVWSpBZ9uE.png" alt="Figure8_cut-n1-n2"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://xsummer1997.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://xsummer1997.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Shell" scheme="https://xsummer1997.github.io/tags/Shell/"/>
    
    <category term="Linux" scheme="https://xsummer1997.github.io/tags/Linux/"/>
    
    <category term="cut" scheme="https://xsummer1997.github.io/tags/cut/"/>
    
  </entry>
  
  <entry>
    <title>一些常见 Shell 命令的使用</title>
    <link href="https://xsummer1997.github.io/2019/12/04/Shell-Commands-Usage/"/>
    <id>https://xsummer1997.github.io/2019/12/04/Shell-Commands-Usage/</id>
    <published>2019-12-04T11:59:13.000Z</published>
    <updated>2020-10-24T10:12:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><ul><li>变量定义等号前后不能加空格，例如：”A=123”</li></ul><h3 id="数组定义引用"><a href="#数组定义引用" class="headerlink" title="数组定义引用"></a>数组定义引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;( test1 test2 test3 )</span><br><span class="line">引用: echo $&#123;A[0&#x2F;1&#x2F;2&#x2F;...]&#125;</span><br><span class="line">显示所有参数 echo $&#123;A[@]&#125;将显示所有参数&#x3D;&gt; test1 test2 test3</span><br><span class="line">显示参数个数 echo $&#123;#A[@]&#125; &#x3D;&gt; 3</span><br><span class="line">替换某个数组元素，例如替还第二个test2数组为test5: echo $&#123;A[@]&#x2F;test2&#x2F;test5&#125;</span><br><span class="line">如何删除某个数组元素，例如删除test3 &#x3D;&gt; unset A[2]</span><br></pre></td></tr></table></figure><h3 id="计算任意精度数"><a href="#计算任意精度数" class="headerlink" title="计算任意精度数"></a>计算任意精度数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;$(echo &quot;scale&#x3D;n;$num1&#x2F;$num2&quot;|bc) &#x2F;&#x2F;scale&#x3D;n;&#96; *n是多少就保留多少位小数*</span><br><span class="line">j&#x3D;\&#96;bc &lt;&lt;&lt; &quot;$num1*$num2-$num3&quot;</span><br><span class="line">b&#x3D;$(echo &quot;$num1 $num2&quot; | awk &#39;&#123;printf(&quot;%n.mf\n&quot;,$1&#x2F;$2)&#125;&#39;)</span><br><span class="line">awk &#39;BEGIN&#123;printf&quot;%.2f\n&quot;,&#39;$num1&#39;&#x2F;&#39;$num2&#39;&#125;&#39;</span><br></pre></td></tr></table></figure><h3 id="计算整数"><a href="#计算整数" class="headerlink" title="计算整数"></a>计算整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;&#96;expr $num1 + $num2&#96;  *使用乘号\* 的时候必须使用转义符号*</span><br><span class="line">let &quot;d&#x3D;$num1+$num2&quot;</span><br><span class="line">((e&#x3D;$num1+$num2))</span><br></pre></td></tr></table></figure><h3 id="bc-使用"><a href="#bc-使用" class="headerlink" title="bc 使用"></a>bc 使用</h3><ul><li><code>ibase</code> 指定输入的数字进制</li><li><code>obase</code> 指定输出的数字进制</li><li><code>scale</code> 设定小数位</li><li><code>echo &quot;obase=10;ibase=2;$num1+$num2&quot; | bc </code></li></ul><h3 id="系统常用参数"><a href="#系统常用参数" class="headerlink" title="系统常用参数"></a>系统常用参数</h3><ul><li><code>$#</code> 是传给脚本的参数个数</li><li><code>$n</code> 是第n个参数</li><li><code>$0</code> 是脚本本身的名字</li><li><code>$1</code> 是传递给该shell脚本的第一个参数</li><li><code>$2</code> 是传递给该shell脚本的第二个参数</li><li><code>$@</code> 是传给脚本的所有参数的列表(加引号时把每个参数作为一个字符串返回,不加引号与$*相同)</li><li><code>$*</code> 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</li><li><code>$$</code> 是脚本运行的当前进程ID号</li><li><code>$?</code> 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</li></ul><h3 id="基本命令用法"><a href="#基本命令用法" class="headerlink" title="基本命令用法"></a>基本命令用法</h3><ul><li>输出重定向 <code>&gt;</code> 妙用：”命令 &gt;&amp; 目标文件”  “命令 &amp;&gt; 目标文件”</li><li>输入重定向 <code>&lt;</code> 妙用：”命令 &lt; 目标文件”   “命令 &lt; 目标文件”</li><li><code>bash + xx.sh</code> 和 ./xx.sh 子shell执行方式</li><li><code>.(空格)xx.sh</code> 和 <code>source xx.sh</code> 当前shell的执行方式</li><li><code>login shell   ==&gt; su - username</code></li><li><code>nologin shell ==&gt; su username</code></li><li>系统级shell配置 ==&gt; <code>/etc/profile /etc/bashrc</code></li><li>用户级shell配置 ==&gt; 登录时加载：<code>~/.bashrc ~/.bash_profile</code> 退出时加载：<code>~/.bash_logout ~/.bash_history</code></li><li>历史命令 <code>!number !string !$（上一个命令的最后一个参数） !!(上一个命令) ^R(命令搜索)</code></li><li>取消别名：unalias或者在命令前加<code>\</code></li><li>快捷键：<code>^D(退出/logout) ^A(移到命令最前面) ^E(移到命令最后面) ^L() ^U(删除光标前面所有命令) ^K(删除光标后面的所有) ^S(锁住命令行) ^Q(解除锁定命令行) ^Y(撤销删除) ^T 交换光标处文字次序</code></li><li>&amp;（退出终端后消失） nohup(退出终端后仍然有)</li><li>管道<code>|</code> ：一个命令的输出作为下一个命令的输入</li><li>输入一行内容到文件 <code>echo 内容 &gt; 文件</code></li><li>输入多行内容到文件 <code>cat  &gt;文件 &lt;&lt; EOF</code></li><li><code>tee</code> : 复制标准输入的内容到标准输出 参数a 表示追加</li><li>在vim里保存没有权限的文件 <code>:w !sudo tee %</code>  （%在vim里是一个只读寄存器的名字，总保存着当前文件的路径）</li></ul><ul><li>命令排序<ul><li><code>;</code>       不具备逻辑判断 <code>cd;eject</code></li><li><code>&amp;&amp; ||</code>   具备逻辑判断   <code>./configure &amp;&amp; make &amp;&amp; make install</code></li><li>显示命令返回值 echo $?</li></ul></li></ul><h3 id="if条件判断参数"><a href="#if条件判断参数" class="headerlink" title="if条件判断参数"></a>if条件判断参数</h3><table><thead><tr><th align="center">参数</th><th align="center">功能</th><th align="left">应用说明</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">判断文件是否存在</td><td align="left">eg: if [ -f filename ]</td></tr><tr><td align="center">-d</td><td align="center">判断目录是否存在</td><td align="left">eg: if [ -d dir ]</td></tr><tr><td align="center">-eq</td><td align="center">等于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-ne</td><td align="center">不等于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-lt</td><td align="center">小于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-gt</td><td align="center">大于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-le</td><td align="center">小于或等于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-ge</td><td align="center">大于或等于</td><td align="left">应用于：整形比较</td></tr><tr><td align="center">-a</td><td align="center">双方都成立(and)</td><td align="left">逻辑表达式 -a 逻辑表达式</td></tr><tr><td align="center">-o</td><td align="center">单方成立   (or)</td><td align="left">逻辑表达式 -o 逻辑表达式</td></tr><tr><td align="center">-z</td><td align="center">空字符串</td><td align="left">/</td></tr></tbody></table><h3 id="if使用"><a href="#if使用" class="headerlink" title="if使用"></a>if使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (($num1+&#x2F;-&#x2F;\*&#x2F;&#x2F;$num2));then</span><br><span class="line">...</span><br><span class="line">fi</span><br><span class="line">if [[ $num1 -lt&#x2F;-gt&#x2F;...&#x2F; $num2 ]];then</span><br><span class="line">...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="for循环使用"><a href="#for循环使用" class="headerlink" title="for循环使用"></a>for循环使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in 字符变量</span><br><span class="line">do</span><br><span class="line">....</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="tail命令的使用"><a href="#tail命令的使用" class="headerlink" title="tail命令的使用"></a>tail命令的使用</h3><table><thead><tr><th align="center">命令</th><th align="center">参数</th><th align="center">数量</th><th align="center">文件名</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">tail</td><td align="center">/</td><td align="center">/</td><td align="center">filename</td><td align="left">打印filename的最后十行</td></tr><tr><td align="center">tail</td><td align="center">-f</td><td align="center">/</td><td align="center">filename</td><td align="left">跟踪显示filename的最后十行</td></tr><tr><td align="center">tail</td><td align="center">-c</td><td align="center">n</td><td align="center">filename</td><td align="left">显示filename的最后的n个字符</td></tr><tr><td align="center">tail</td><td align="center">-n</td><td align="center">/</td><td align="center">filename</td><td align="left">显示filename的第n行至末尾的内容</td></tr></tbody></table><h3 id="while循环使用"><a href="#while循环使用" class="headerlink" title="while循环使用"></a>while循环使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [[ ...(满足此条件执行循环) ]]</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="until循环使用"><a href="#until循环使用" class="headerlink" title="until循环使用"></a>until循环使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [[ ...(满足此条件退出循环) ]]</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="case-选择语句使用"><a href="#case-选择语句使用" class="headerlink" title="case 选择语句使用"></a>case 选择语句使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case $arg in</span><br><span class="line">pattern1)</span><br><span class="line">语句1</span><br><span class="line">;;</span><br><span class="line">pattern2)</span><br><span class="line">语句2</span><br><span class="line">;;</span><br><span class="line">patternn)</span><br><span class="line">语句n</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="select-选择语句使用"><a href="#select-选择语句使用" class="headerlink" title="select 选择语句使用"></a>select 选择语句使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS3&#x3D;&quot;文本描述&quot;  &#x2F;&#x2F;在select语句前使用此命令则会在每次选择时显示文本描述内容</span><br><span class="line">select i in &quot;变量1&quot; &quot;变量2&quot; &quot;变量n&quot;</span><br><span class="line">do</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="read-使用"><a href="#read-使用" class="headerlink" title="read 使用"></a>read 使用</h3><ul><li>read 变量 从标准输入里读取内容赋值给变量</li><li>read -p “文本” 变量名</li></ul><h3 id="sed-使用"><a href="#sed-使用" class="headerlink" title="sed 使用"></a>sed 使用</h3><ul><li>注：在Mac下需要在-i后面加一个”.bak”,会生成一个”原文件.bak”的备份文件</li><li></li><li><code>sed &#39;s/old/new/g&#39; filename</code>        <em>将filename里的所有old预修改为new，并在终端显示，但不会实际修改文件</em></li><li><code>sed -i &#39;s/old/new/g&#39; filename</code>     <em>将filename里的所有old改为new</em></li><li><code>sed -i &#39;s/^/&amp; /g&#39; filename</code>        <em>在文件每行的最前面加一个空格</em></li><li><code>sed &#39;文件中已经存在的字符/a 你想在前面已经存在的字符后面一行加的字符/&#39;</code></li><li><code>sed &#39;文件中已经存在的字符/i 你想在前面已经存在的字符前面一行加的字符/&#39;</code></li></ul><ul><li>在Mac下使用a\ i\ 需要以下输入方式:<ul><li><code>sed &#39;/文本1/a\ &lt;CR&gt;</code></li><li><code>&gt;文本2 filename</code></li></ul></li></ul><ul><li><code>sed -i &quot;&quot; &#39;s/ /\&#39;$&#39;\n&#39;&#39;/g&#39; filename</code>     <em>在Mac下将filename里的空格转换为换行符</em></li><li><code>sed &#39;nd&#39; filename</code>                              <em>删除第n行，其余的打印到屏幕上</em></li><li><code>sed &#39;n,$d&#39; filename</code>                         <em>删除第n行到最后一行，其余打印到屏幕上</em></li><li><code>sed -i &#39;ns/old/new/&#39; filename</code>                <em>n表示第n行</em></li></ul><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li><code>find [目录]... [表达式] [操作]</code></li></ul><blockquote><p>【表达式】:</p></blockquote><table><thead><tr><th align="center">表达式</th><th align="center">后接参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-name</td><td align="center">文件名</td><td align="left">带有通配符时要加单’’或双引号””</td></tr><tr><td align="center">-user</td><td align="center">用户名</td><td align="left">…</td></tr><tr><td align="center">-group</td><td align="center">组名</td><td align="left">…</td></tr><tr><td align="center">-mtime</td><td align="center">[+-]n</td><td align="left">查找n天前修改过的文件 “+n表示超过n天,-n表示不超过n天”</td></tr><tr><td align="center">-atime</td><td align="center">[+-]n</td><td align="left">访问…</td></tr><tr><td align="center">-ctime</td><td align="center">[+-]n</td><td align="left">变更…</td></tr><tr><td align="center">-mmin</td><td align="center">[+-]n</td><td align="left">分钟…</td></tr><tr><td align="center">-amin</td><td align="center">[+-]n</td><td align="left">分钟…</td></tr><tr><td align="center">-cmin</td><td align="center">[+-]n</td><td align="left">分钟…</td></tr><tr><td align="center">-type</td><td align="center">[f/d/b/c]</td><td align="left">f(普通文件)/d(目录)/b(块设备文件)/c(字符设备文件)</td></tr><tr><td align="center">-size</td><td align="center">[+-]n[]</td><td align="left">b(块==512字节)/c(字节)/k(1024字节)/w(字==2字节)</td></tr><tr><td align="center">-a</td><td align="center">/</td><td align="left">and;与操作，连接两个表达式，表示要同时满足两个表达式</td></tr><tr><td align="center">-o</td><td align="center">/</td><td align="left">or; 与操作，连接两个表达式，表示只满足其中一个表达式</td></tr><tr><td align="center">!</td><td align="center">/</td><td align="left">非；取反操作</td></tr><tr><td align="center">\( 表达式 \)</td><td align="center">/</td><td align="left">括号中的优先</td></tr></tbody></table><blockquote><p>【操作】:</p></blockquote><table><thead><tr><th align="center">操作</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-print</td><td align="left">显示找到的文件名</td></tr><tr><td align="center">-ls</td><td align="left">显示找到文件的详细信息</td></tr><tr><td align="center">-exec command {} ;</td><td align="left">对找到的文件执行指定命令</td></tr><tr><td align="center">-ok command {} ;</td><td align="left">对找到的文件执行指定命令,执行命令时提醒确认</td></tr></tbody></table><blockquote><p>【说明】：</p></blockquote><ul><li>未指定搜索条件时，显示目录下所有文件，包含隐藏文件。未指定目录时，默认为当前目录。未指定操作时，默认的操作是<code>-print</code></li></ul><h3 id="grep-查找关键字"><a href="#grep-查找关键字" class="headerlink" title="grep 查找关键字"></a>grep 查找关键字</h3><ul><li>注：搜索关键字时最好用单或者双引号包含起来,有多个参数时，-e放在最后</li></ul><ul><li><code>grep 关键字 filename/stdin</code>   <em>从filename或stdin里查找关键字</em></li><li><code>grep -v 关键字</code>                             <em>除了制定的关键字之外的词</em></li><li><code>grep -E &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</code> <em>匹配类似IP地址的文本，192.168.10.10</em></li><li><code>grep -c</code> <em>列出关键字所在的行数</em></li><li><code>grep -l</code> <em>只显示匹配字符串的文件名</em></li><li><code>grep [OPTIONS] PATTERN [FILE...]</code></li><li><code>grep [OPTIONS] [-e PATTERN]...  [-f FILE]...  [FILE...]</code></li></ul><blockquote><p>OPTIONS:</p></blockquote><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-e:</td><td align="left">使用正则搜索</td></tr><tr><td align="center">-i:</td><td align="left">不区分大小写</td></tr><tr><td align="center">-v:</td><td align="left">查找不包含指定内容的行</td></tr><tr><td align="center">-w:</td><td align="left">按单词搜索</td></tr><tr><td align="center">-c:</td><td align="left">统计匹配到的次数</td></tr><tr><td align="center">-n:</td><td align="left">显示行号</td></tr><tr><td align="center">-r:</td><td align="left">逐层遍历目录查找</td></tr><tr><td align="center">-A:</td><td align="left">显示匹配行及后面多少行, 如: -A 3, 则表示显示匹配行及后3行</td></tr><tr><td align="center">-B:</td><td align="left">显示匹配行及前面多少行, 如: -B 3, 则表示显示匹配行及前3行</td></tr><tr><td align="center">-C:</td><td align="left">显示匹配行前后多少行,   如: -C 3, 则表示显示批量行前后3行</td></tr><tr><td align="center">--color:</td><td align="left">匹配到的内容高亮显示</td></tr><tr><td align="center">--include:</td><td align="left">指定匹配的文件类型</td></tr><tr><td align="center">--exclude:</td><td align="left">过滤不需要匹配的文件类型</td></tr><tr><td align="center">[/]</td><td align="left">指定匹配字符的范围。如模式’[Mm]ain’ 匹配 Main和main</td></tr><tr><td align="center">\&lt;</td><td align="left">标注词首，如模式’&lt;man’ 匹配 manic和man，但不匹配Batman</td></tr><tr><td align="center">\&gt;</td><td align="left">标注词尾，如模式’man&gt;‘ 匹配 Batman和man，但不匹配manic</td></tr><tr><td align="center">^</td><td align="left">标注行首，如’^The’匹配行首的The，而不匹配其他位置的The</td></tr><tr><td align="center">$</td><td align="left">标注行尾，如’$The’匹配行尾的The，而不匹配其他位置的The</td></tr><tr><td align="center">\|</td><td align="left">表示模式间的或关系。如’Saturday\|Sunday’ 匹配Saturday或Sunday</td></tr></tbody></table><h3 id="awk-使用"><a href="#awk-使用" class="headerlink" title="awk 使用"></a>awk 使用</h3><ul><li><code>awk -v I=$i &#39;&#123;if(I==$1)print $2&#125;</code>     <em>-v：允许添加变量 ，如果I等于第一列，就打印第二列</em></li></ul><h3 id="tar备份"><a href="#tar备份" class="headerlink" title="tar备份"></a>tar备份</h3><ul><li>全部备份：<code>tar -g snapshot -cvzf xx.tar.gz xx(想要备份的文件)</code></li><li>增量备份：<code>tar -g snapshot -cvzf xxx.tar.gz xx(跟上面一样的目录文件)</code><em>这里的snapshot跟上面是同一个文件，但压缩包名字要求不一样</em></li></ul><h3 id="ip-fliter"><a href="#ip-fliter" class="headerlink" title="ip fliter"></a>ip fliter</h3><ul><li><code>tail -1000 /var/log/secure | grep &quot;Failed password&quot; | egrep -o &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; | sort -nr | uniq -c | awk &#39;$1&gt;=4 &#123;print $2&#125;&#39;</code></li></ul><h3 id="ssh秘钥链接"><a href="#ssh秘钥链接" class="headerlink" title="ssh秘钥链接"></a>ssh秘钥链接</h3><ul><li>ssh-keygen       //之后连续三次默认确定</li><li>ssh-copy-id -i /root/.ssh/id_rsa.pub +远程ip地址</li><li>ssh-copy-id -i /root/.ssh/id_rsa.pub +本地ip地址</li></ul><h3 id="wc-命令使用"><a href="#wc-命令使用" class="headerlink" title="wc 命令使用"></a>wc 命令使用</h3><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-c</td><td align="left">只统计字节数，汉字加3，字母加1</td></tr><tr><td align="center">-l</td><td align="left">只统计行数</td></tr><tr><td align="center">-m</td><td align="left">只统计字符数,不论是字母还是汉字都只加1</td></tr><tr><td align="center">-w</td><td align="left">只统计字数</td></tr></tbody></table><ul><li>注：不指定参数，默认为显示行数、字数和字符数</li></ul><h3 id="gcc编译基础"><a href="#gcc编译基础" class="headerlink" title="gcc编译基础"></a>gcc编译基础</h3><table><thead><tr><th align="left">阶段</th><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1.预处理（preprocessing)</td><td align="left">gcc -E</td><td align="left">旧版由gcc调用cpp完成，新版作为编译的一个阶段，由gcc完成</td></tr><tr><td align="left">2.编译  （compilation）</td><td align="left">gcc -S</td><td align="left">gcc完成</td></tr><tr><td align="left">3.汇编  （assembly）</td><td align="left">gcc -c</td><td align="left">gcc调用汇编器as完成</td></tr><tr><td align="left">4.连接  （linking）</td><td align="left">gcc</td><td align="left">gcc调用连接器ld完成</td></tr></tbody></table><blockquote><p>gcc命令</p></blockquote><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">-Wall</td><td align="left">显示所有警告信息</td></tr><tr><td align="center">-I[dirname]</td><td align="left">将dirname目录加入到头文件搜索列表中</td></tr><tr><td align="center">-L[dirname]</td><td align="left">将dirname目录加入到库文件搜索列表中</td></tr><tr><td align="center">-l[name]</td><td align="left">加载名为libname.a或者libname.so的函数库.例如-lm表示连接名为libm.so的数学 函数库</td></tr><tr><td align="center">-static</td><td align="left">使用静态库。注意：在命令行中，静态加载的库必须位于调用该库的目标文件之后</td></tr></tbody></table><ul><li>gcc代码优化（等级：0、1、2、s级），默认为0级，不进行优化<ul><li>-O     对代码基本优化（1级）</li><li>-O2    对代码进行深度优化（2级）</li><li>-Os    生成最小的可执行文件，适合嵌入式软件</li></ul></li><li>gcc调试<ul><li>-g 产生能够被 GDB调速器使用的调试信息。-g可以与-O和-O2连用，以便在与最终产品尽可能相近的情况下调试代码。</li><li>-pg在程序里加入额外 的代码，执行时产生供性能分析工具gprof使用的剖析信息，以便了解程序的耗时情况 。</li></ul></li></ul><h3 id="man-联机手册"><a href="#man-联机手册" class="headerlink" title="man 联机手册"></a>man 联机手册</h3><ul><li>man 命令格式： man [option] command_name</li></ul><ul><li>option:<ul><li>i[p] 指定在第i节里查找。1为系统命令，2为系统调用，3为C库函数。p表示POSIX手册页，即1p为POSIX手册页，3P为POSIX库函数。</li><li>-k   显示所有名称中含有command_name的手册页及其说明</li><li>-f   查询全部与名称相符的手册页</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="https://xsummer1997.github.io/categories/Linux/"/>
    
    <category term="Shell" scheme="https://xsummer1997.github.io/categories/Linux/Shell/"/>
    
    
    <category term="Shell" scheme="https://xsummer1997.github.io/tags/Shell/"/>
    
    <category term="Linux" scheme="https://xsummer1997.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vim 的一些基本命令</title>
    <link href="https://xsummer1997.github.io/2019/12/04/Vim-Some-Basic-Commands/"/>
    <id>https://xsummer1997.github.io/2019/12/04/Vim-Some-Basic-Commands/</id>
    <published>2019-12-04T10:54:18.000Z</published>
    <updated>2019-12-08T11:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="vi-vim-常用基本命令："><a href="#vi-vim-常用基本命令：" class="headerlink" title="vi/vim 常用基本命令："></a>vi/vim 常用基本命令：</h2><ul><li>文本的输入：</li></ul><blockquote><p><code>a\A</code> 光标后\当前行最后面插入<br><code>i\I</code> 光标前\当前行最前面插入<br><code>o\O</code> 在当前行的 下一行\上一行插入新的空白行</p></blockquote><ul><li>文本的删除：</li></ul><blockquote><p><code>x\X</code> 删除光标处、光标前的字符<br><code>dd</code>  删除当前行<br><code>J </code>  删除当前行的换行符，使当前行与下一行合并为一行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d+定位符</span><br><span class="line">        d0\d^ 删除光标左边的文本。0或^代表行首</span><br><span class="line">        d$    删除光标右边的文本。$代表行尾</span><br><span class="line">        dG    删除光标所在行之后的所有行。G代表最后一行</span><br><span class="line">        db    删除光标处前的字符直到词首。b代表词尾</span><br><span class="line">        de    删除光标处的字符直到词尾。e代表词尾</span><br><span class="line">        dw    删除光标处的字符直到下一个词的词首。w代表下一词词首。</span><br><span class="line">        注：以上命令前带数字n时表示删除范围扩大n倍。</span><br></pre></td></tr></table></figure><ul><li>文本的修改：</li></ul><blockquote><p><code>cc</code> 修改光标所在的行<br><code>C </code> 修改光标处到行尾的文本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c+定位符</span><br><span class="line">        c0\c^ 修改光标左边的文本。0或^代表行首</span><br><span class="line">        c$    修改光标右边的文本。$代表行尾</span><br><span class="line">        cG    修改光标所在行之后的所有行。G代表最后一行</span><br><span class="line">        cb    修改光标处前的字符直到词首。b代表词尾</span><br><span class="line">        ce    修改光标处的字符直到词尾。e代表词尾</span><br><span class="line">        cw    修改光标处的字符直到下一个词的词首。w代表下一词词首。</span><br><span class="line">        cl    修改光标处的字符</span><br><span class="line">        注：以上命令前带数字n时表示删除范围扩大n倍。</span><br></pre></td></tr></table></figure><ul><li>文本的替换与替代：</li></ul><blockquote><p><code>r</code>   替换一个字符，直到按下ESC结束<br><code>R</code>   逐渐代替光标处的各个字符，直到按下ESC结束<br><code>s</code>   删除光标处的字符并进入插入模式，等同于cl，直到按下ESC结束<br><code>S</code>   删除光标行的字符并进入插入模式，等同于cc，直到按下ESC结束</p></blockquote><ul><li>文本的拷贝、粘贴与选择：</li></ul><blockquote><p><code>yy</code> 拷贝光标所在的行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">y+定位符</span><br><span class="line">        y0\c^ 拷贝光标左边的文本。0或^代表行首</span><br><span class="line">        y$    拷贝光标右边的文本。$代表行尾</span><br><span class="line">        yG    拷贝光标所在行之后的所有行。G代表最后一行</span><br><span class="line">        yb    拷贝光标处前的字符直到词首。b代表词尾</span><br><span class="line">        ye    拷贝光标处的字符直到词尾。e代表词尾</span><br><span class="line">        yw    拷贝光标处的字符直到下一个词的词首。w代表下一词词首。</span><br><span class="line">        yl    拷贝光标处的字符</span><br><span class="line">        p\P:  若剪贴板中的内容是完整的行，则将这些行插入到光标所在行之后、之前;若剪贴板中的内容不是完整的行，则将这些行插入到光标处之后、之前</span><br><span class="line">        注：以上命令前带数字n时表示删除范围扩大n倍。</span><br><span class="line">        v      以字符为单位选择连续的文本串</span><br><span class="line">        V      以行为单位选择连续的文本行</span><br><span class="line">        Ctrl+v 按字符位置选择文本块</span><br></pre></td></tr></table></figure><h2 id="vi-vim-末行模式常用基本命令："><a href="#vi-vim-末行模式常用基本命令：" class="headerlink" title="vi/vim 末行模式常用基本命令："></a>vi/vim 末行模式常用基本命令：</h2><ul><li>字符串替换</li></ul><p><code>:[n1,n2]s/p1/p2/[g][c]</code></p><blockquote><p>注：实际使用时不需要加[]，n1、n2是行号范围，可用%代表所有行，未指定范围时，目标行就是光标所在的当前行，g代表替换目标行中所有匹配的字符串，选项c代表替换前要求用户确认</p></blockquote><ul><li>全局命令</li></ul><blockquote><p><code>:g/pl</code>            搜索所有包含pl字符串模式的行。<br><code>:g!/pl</code>           搜索所有不包含pl字符串模式的行。<br><code>:g/pl/command</code>    对所有包含pl字符串模式的行执行command命令。<br><code>:g!/pl/command</code>   对所有不包含pl字符串模式的行执行command命令。<br>                   command 一般有p：显示行；d：删除行</p></blockquote><ul><li>其他命令</li></ul><blockquote><p><code>:n</code>          跳至第n行<br><code>:n1,n2con3</code>  将第n1至n2行之间的内容拷贝到第n3行下<br><code>:n1,n2mn3</code>   将第n1至n2行之间的内容移动到第n3行下<br><code>:n1,n2d</code>     将第n1至n2行之间的内容删除<br><code>:p</code>          显示当前行的内容<br><code>:nohl</code>       将选择的内容取消高亮</p></blockquote><h2 id="一些自己可能用但常忘记的命令"><a href="#一些自己可能用但常忘记的命令" class="headerlink" title="一些自己可能用但常忘记的命令"></a>一些自己可能用但常忘记的命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">:w !sudo tee % &gt;&#x2F;dev&#x2F;dull  &#x3D;&#x3D;&gt; 保存没有编辑权限的文件</span><br><span class="line">&lt;space&gt; cs v模式选中后注释</span><br><span class="line">&lt;space&gt; cn v模式选中后解注释</span><br><span class="line">&lt;space&gt; rn 改名</span><br><span class="line">&lt;space&gt; y  查看yank历史</span><br><span class="line">v模式下tbr  &#x3D;&#x3D;  :&#39;&lt;,&#39;&gt;Tabularize &#x2F;&#x3D;&lt;CR&gt;</span><br><span class="line">记录宏：norm模式下按q加一个字母开始记录操作，按q结束记录，@加上前面使用的字母使用宏</span><br><span class="line">批量更改&quot;&#x2F;&#39;&#x2F;)等符号 &#x3D;&#x3D;&gt; v模式选中后输入 :&#39;&lt;,&#39;&gt;norm cs 你要更改的符号&lt;space&gt;你想要的符号</span><br><span class="line">norm模式下输入q:显示历史命令</span><br><span class="line">norm模式下输入q&#x2F;显示历史搜索</span><br><span class="line">marks 查看mark记录</span><br><span class="line">delmark 加 标签名 删除标签</span><br><span class="line">m加上小写字母可以当前文件内跳转，加大写字母可以在多个文件内跳转</span><br><span class="line">页签：打开：tabe 文件路径与文件名 新建：tabe split&#x2F;new 使用gt 切换页签</span><br><span class="line">[n]|     光标移动到第n列，未指定n时移到首列</span><br><span class="line">[n]G     光标移动到第n行，未指定n时移到末行</span><br><span class="line">(、)、&#123;、&#125;  光标移到句首、句尾、段首、段位</span><br></pre></td></tr></table></figure><h2 id="Vim-官方手册每讲小结"><a href="#Vim-官方手册每讲小结" class="headerlink" title="Vim 官方手册每讲小结"></a>Vim 官方手册每讲小结</h2><h3 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a>第一讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。</span><br><span class="line">h (左移)j (下行)       k (上行)    l (右移)</span><br><span class="line">2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</span><br><span class="line">3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。或者输入 &lt;ESC&gt;   :wq或x   &lt;回车&gt; 保存改动。</span><br><span class="line">4. 在正常模式下删除光标所在位置的字符，请按： x</span><br><span class="line">5. 欲插入或添加文本，请输入：</span><br><span class="line">i   输入欲插入文本   &lt;ESC&gt;在光标前插入文本</span><br><span class="line">A   输入欲添加文本   &lt;ESC&gt;     在一行后添加文本</span><br></pre></td></tr></table></figure><h3 id="第二讲小结"><a href="#第二讲小结" class="headerlink" title="第二讲小结"></a>第二讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. 欲从当前光标删除至下一个单词，请输入：dw</span><br><span class="line">2. 欲从当前光标删除至当前行末尾，请输入：d$</span><br><span class="line">3. 欲删除整行，请输入：dd</span><br><span class="line">4. 欲重复一个动作，请在它前面加上一个数字：2w</span><br><span class="line">5. 在正常模式下修改命令的格式是：</span><br><span class="line">             operator   [number]   motion</span><br><span class="line">   其中：</span><br><span class="line">     operator - 操作符，代表要做的事情，比如 d 代表删除</span><br><span class="line">     [number] - 可以附加的数字，代表动作重复的次数</span><br><span class="line">     motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等。</span><br><span class="line">6. 欲移动光标到行首，请按数字0键：0</span><br><span class="line">7. 欲撤消以前的操作，请输入：u (小写的u)</span><br><span class="line">   欲撤消在一行中所做的改动，请输入：U (大写的U)</span><br><span class="line">   欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R</span><br></pre></td></tr></table></figure><h3 id="第三讲小结"><a href="#第三讲小结" class="headerlink" title="第三讲小结"></a>第三讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除</span><br><span class="line">   的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置</span><br><span class="line">   于当前光标所在行的下一行。</span><br><span class="line">2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字</span><br><span class="line">   符即可。</span><br><span class="line">3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当前光标到行末的内容。</span><br><span class="line">4. 更改类命令的格式是：</span><br><span class="line">                   c   [number]   motion</span><br></pre></td></tr></table></figure><h3 id="第四讲小结"><a href="#第四讲小结" class="headerlink" title="第四讲小结"></a>第四讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. CTRL-G 用于显示当前光标所在位置和文件状态信息。</span><br><span class="line">   G 用于将光标跳转至文件最后一行。</span><br><span class="line">   先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。</span><br><span class="line">   gg 用于将光标跳转至文件第一行。</span><br><span class="line">2. 输入 &#x2F; 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。</span><br><span class="line">   输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。</span><br><span class="line">   完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查</span><br><span class="line">   找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。</span><br><span class="line">   CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。</span><br><span class="line">3. 如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。</span><br><span class="line">4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s&#x2F;old&#x2F;new</span><br><span class="line">   在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s&#x2F;old&#x2F;new&#x2F;g</span><br><span class="line">   在两行内替换所有的字符串 old 为新的字符串 new，请输入  :,s&#x2F;old&#x2F;new&#x2F;g</span><br><span class="line">   在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s&#x2F;old&#x2F;new&#x2F;g</span><br><span class="line">   进行全文替换时询问用户确认每个替换需添加 c 标志        :%s&#x2F;old&#x2F;new&#x2F;gc</span><br></pre></td></tr></table></figure><h3 id="第五讲小结"><a href="#第五讲小结" class="headerlink" title="第五讲小结"></a>第五讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. :!command 用于执行一个外部命令 command。</span><br><span class="line">   请看一些实际例子：</span><br><span class="line">(MS-DOS)  (Unix)</span><br><span class="line"> :!dir   :!ls   -  用于显示当前目录的内容。</span><br><span class="line"> :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。</span><br><span class="line">2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的件中。</span><br><span class="line">3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件FILENAME 中。</span><br><span class="line">4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置后面。</span><br><span class="line">5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</span><br></pre></td></tr></table></figure><h3 id="第六讲小结"><a href="#第六讲小结" class="headerlink" title="第六讲小结"></a>第六讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。</span><br><span class="line">    输入大写的 O 可以在光标上方打开新的一行。</span><br><span class="line"> 2. 输入小写的 a 可以在光标所在位置之后插入文本。</span><br><span class="line">    输入大写的 A 可以在光标所在行的行末之后插入文本。</span><br><span class="line"> 3. e 命令可以使光标移动到单词末尾。</span><br><span class="line"> 4. 操作符 y 复制文本，p 粘贴先前复制的文本。</span><br><span class="line"> 5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。</span><br><span class="line"> 6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：</span><br><span class="line">&#39;ic&#39; &#39;ignorecase&#39;查找时忽略字母大小写</span><br><span class="line">&#39;is&#39; &#39;incsearch&#39;查找短语时显示部分匹配</span><br><span class="line">&#39;hls&#39; &#39;hlsearch&#39;高亮显示所有的匹配短语</span><br><span class="line">    选项名可以用完整版本，也可以用缩略版本。</span><br><span class="line"> 7. 在选项前加上 no 可以关闭选项：  :set noic</span><br></pre></td></tr></table></figure><h3 id="第七讲小结"><a href="#第七讲小结" class="headerlink" title="第七讲小结"></a>第七讲小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。</span><br><span class="line">2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。</span><br><span class="line">3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。</span><br><span class="line">4. 输入 :q 以关闭帮助窗口</span><br><span class="line">5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</span><br><span class="line">6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。按 &lt;TAB&gt; 可以使用一个补全。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Vim" scheme="https://xsummer1997.github.io/categories/Vim/"/>
    
    
    <category term="Vim" scheme="https://xsummer1997.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Github Page + Hexo 搭建个人博客</title>
    <link href="https://xsummer1997.github.io/2019/11/30/Github-Page-Hexo-Set-up-a-Personal-Blog/"/>
    <id>https://xsummer1997.github.io/2019/11/30/Github-Page-Hexo-Set-up-a-Personal-Blog/</id>
    <published>2019-11-30T15:17:20.000Z</published>
    <updated>2019-12-04T10:59:01.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文详细概述了从零开始使用 <em>GitHub Pages + Hexo</em> 建造一个属于自己的博客。</p><h2 id="什么是GitHub-Pages-、Hexo"><a href="#什么是GitHub-Pages-、Hexo" class="headerlink" title="什么是GitHub Pages 、Hexo"></a>什么是GitHub Pages 、Hexo</h2><ul><li>GitHub Pages</li></ul><blockquote><p>GitHub Pages 是一个静态网页托管服务。被设计来管理你的来自一个GitHub 库的个人的、组织的、或者项目的页面。</p></blockquote><ul><li>Hexo</li></ul><blockquote><p>根据官方介绍，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><ul><li>Windows</li></ul><blockquote><p>下载并安装 git </p></blockquote><ul><li><a href="https://git-scm.com/download/win">下载地址一 海外用户</a></li><li><a href="https://npm.taobao.org/mirrors/git-for-windows/">下载地址二 国内用户</a></li></ul><ul><li>Mac</li></ul><blockquote><p>1.安装 Hmoebrew</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.安装 git</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure><blockquote><p>注：如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <code>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</code> 安装命令行工具。</p></blockquote><ul><li>Linux</li></ul><blockquote><p>Ununtu、Debian</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git-core</span><br></pre></td></tr></table></figure><blockquote><p>Fedora、Red Hat、CetOS</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install git-core</span><br></pre></td></tr></table></figure><h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><ul><li><p><code>Node.js</code> 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。</p></li><li><p>推荐通过 <a href="https://github.com/jasongin/nvs/">nvs</a> 或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装，以避免可能会出现的权限问题。</p></li><li><p>Mac</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure><blockquote><p>Mac 用户如果在尝试安装 Hexo 的过程中出现 EACCES 权限错误，请遵循由 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">npmjs</a> 发布的指导修复该问题。强烈建议不要使用 <code>root、sudo</code> 等方法覆盖权限</p></blockquote><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init <span class="string">&#x27;foldername&#x27;</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">&#x27;foldername&#x27;</span></span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><blockquote><p>注：foldername是你想要新建博客文件的名称</p></blockquote><h2 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h2><p>如果没有GitHub账号，去 <a href="https://github.com/">GitHub 官网</a> 注册一个，详细步骤不再阐述，不知道的百度一大堆。</p><h2 id="创建一个-GitHub-Pages"><a href="#创建一个-GitHub-Pages" class="headerlink" title="创建一个 GitHub Pages"></a>创建一个 GitHub Pages</h2><ul><li>登录GitHub后，点击页面右上角加号，如下图所示：</li></ul><p><img src="https://i.loli.net/2019/12/03/1QCnHxZBP3FXlfO.jpg" alt="Create a New Repository 1"></p><ul><li>username为你想要的博客名，然后选择public，加入README，不加也可以后面自己创建。</li></ul><p><img src="https://i.loli.net/2019/12/03/tvaw1xhzOoTE5dl.jpg" alt="Create a New Repository 2"></p><ul><li>点击 <code>Create repository</code>完成创建。</li></ul><h2 id="配置GitHub的SSH-Key"><a href="#配置GitHub的SSH-Key" class="headerlink" title="配置GitHub的SSH Key"></a>配置GitHub的SSH Key</h2><ul><li>输入以下命令生成密钥 SSH Key</li></ul><blockquote><p>以前用过 ssh-keygen 生成过密钥，用以下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;email@.xx.com&#x27;</span> -f ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><blockquote><p>以前没用过 ssh-keygen 生成过密钥，用以下命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;邮箱地址&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;email@.xx.com&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>输入以下命令并将输出内容复制</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa_github.pub</span><br></pre></td></tr></table></figure><ul><li>登陆到GitHub，点击右上角头像，选择 <code>Settings</code> ，然后选择 <code>SSH and GPG keys</code> ，再点击 <code>New SSH key</code> ，输入你想命名的 <code>Title</code> ，最后将刚才复制的密钥粘贴进去，点击 <code>Add SSH key</code> 。</li></ul><h2 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h2><ol><li>去<a href="https://hexo.io/themes/">官方Hexo主题社区</a>看一个你自己喜欢的主题，我选的是 <a href="https://jerryc.me/posts/21cfbf15/">Butterfly</a>这个主题</li><li>下载主题文件到 Hexo 的 foldername 的下的theme里</li><li>修改 flodername 下的 _config.yml 文件下面选中部分为你上一步放在theme文件夹里的文件名：</li></ol><p><img src="https://i.loli.net/2019/12/03/Otc4QKPlISMswfe.jpg" alt="Change Hexo Theme"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ul><li>进入前面 Hexo 的 foldername 文件夹，修改 _config.yml 的下面部分：</li></ul><p><img src="https://i.loli.net/2019/12/03/5K2QEB4XWSerbNR.jpg" alt="Change Blog URL "></p><p><img src="https://i.loli.net/2019/12/03/GniN8MsqzwFfYuJ.jpg" alt="Change Deployment Information"></p><blockquote><p>选中部分根据自己的账号名修改</p></blockquote><ul><li>安装部署插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li> 执行部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>过几分钟就可以访问网址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://xsummer1997.github.io/categories/Hexo/"/>
    
    <category term="Blog" scheme="https://xsummer1997.github.io/categories/Hexo/Blog/"/>
    
    
    <category term="Github" scheme="https://xsummer1997.github.io/tags/Github/"/>
    
    <category term="Github Page" scheme="https://xsummer1997.github.io/tags/Github-Page/"/>
    
    <category term="Hexo" scheme="https://xsummer1997.github.io/tags/Hexo/"/>
    
    <category term="Blog" scheme="https://xsummer1997.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
